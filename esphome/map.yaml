# Cards are based on athua's code (https://github.com/athua/ha-utils) with some custom modifications.
# Code version: 2024.01.26 - Full
# Docs: https://docs.screek.io/2a/add-a-map-card
type: custom:plotly-graph
refresh_interval: 1
hours_to_show: current_day
config:
  modeBarButtonsToRemove:
    - select2d
    - lasso2d
    - toImage
  displaylogo: false
layout:
  height: 240
  margin:
    l: 40
    r: 20
    t: 20
    b: 55
  showlegend: true
  xaxis:
    showticklabels: true
    dtick: 1000
    visible: true
    gridcolor: RGBA(200,200,200,0.15)
    zerolinecolor: RGBA(200,200,200,0.15)
    type: number
    fixedrange: true
    range:
      - 4000
      - -4000
  yaxis:
    showticklabels: true
    dtick: 1000
    visible: true
    gridcolor: RGBA(200,200,200,0.15)
    zerolinecolor: RGBA(200,200,200,0.15)
    scaleanchor: x
    scaleratio: 1
    fixedrange: true
    range:
      - 7500
      - 0
entities:
  - entity: ''
    fn_var1: $ex vars.sensor_id = "presence_sensor";
    fn_var2: $ex vars.sensor_name_prefix = "sensor." + vars.sensor_id + "_";
    fn_var3: $ex vars.number_name_prefix = "number." + vars.sensor_id + "_";
    fn_var4: $ex vars.is_inch_unit = hass.states[vars.sensor_name_prefix + "target1_x"].attributes.unit_of_measurement == "in";
    # name: sensor_id
  - entity: ''
    name: Target1
    marker:
      size: 10
      symbol: star-diamond
    line:
      shape: spline
      width: 5
    x:
      - $ex {
          var x = hass.states[vars.sensor_name_prefix + "target1_x"].state;
          var y = hass.states[vars.sensor_name_prefix + "target1_y"].state;
          if (x == 0 && y == 0) { return -9999 };
          if (vars.is_inch_unit) { x = x * 25.4 };
          return x;
        }
    y:
      - $ex {
          var x = hass.states[vars.sensor_name_prefix + "target1_x"].state;
          var y = hass.states[vars.sensor_name_prefix + "target1_y"].state;
          if (x == 0 && y == 0) { return -9999 };
          if (vars.is_inch_unit) { y = y * 25.4 };
          return y;
        }
  - entity: ''
    name: Target2
    marker:
      size: 10
      symbol: star-diamond
    line:
      shape: spline
      width: 5
    x:
      - $ex {
          var x = hass.states[vars.sensor_name_prefix + "target2_x"].state;
          var y = hass.states[vars.sensor_name_prefix + "target2_y"].state;
          if (x == 0 && y == 0) { return -9999 };
          if (vars.is_inch_unit) { x = x * 25.4 };
          return x;
        }
    y:
      - $ex {
          var x = hass.states[vars.sensor_name_prefix + "target2_x"].state;
          var y = hass.states[vars.sensor_name_prefix + "target2_y"].state;
          if (x == 0 && y == 0) { return -9999 };
          if (vars.is_inch_unit) { y = y * 25.4 };
          return y;
        }
  - entity: ''
    internal: false
    name: Target3
    marker:
      size: 10
      symbol: star-diamond
    line:
      shape: spline
      width: 5
    x:
      - $ex {
          var x = hass.states[vars.sensor_name_prefix + "target3_x"].state;
          var y = hass.states[vars.sensor_name_prefix + "target3_y"].state;
          if (x == 0 && y == 0) { return -9999 };
          if (vars.is_inch_unit) { x = x * 25.4 };
          return x;
        }
    y:
      - $ex {
          var x = hass.states[vars.sensor_name_prefix + "target3_x"].state;
          var y = hass.states[vars.sensor_name_prefix + "target3_y"].state;
          if (x == 0 && y == 0) { return -9999 };
          if (vars.is_inch_unit) { y = y * 25.4 };
          return y;
        }

  - entity: ''
    name: Zone1
    mode: lines
    fill: toself
    fillcolor: RGBA(20,200,0,0.06)
    line:
      color: RGBA(20,200,0,0.2)
      shape: line
      width: 2
    x:
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone1_x_begin"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone1_x_begin"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone1_x_end"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone1_x_end"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone1_x_begin"].state
    y:
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone1_y_begin"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone1_y_end"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone1_y_end"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone1_y_begin"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone1_y_begin"].state
  - entity: ''
    name: Zone2
    mode: lines
    fill: toself
    fillcolor: RGBA(200,0,255,0.06)
    line:
      color: RGBA(200,0,255,0.2)
      shape: line
      width: 2
    x:
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone2_x_begin"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone2_x_begin"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone2_x_end"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone2_x_end"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone2_x_begin"].state
    y:
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone2_y_begin"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone2_y_end"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone2_y_end"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone2_y_begin"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone2_y_begin"].state
  - entity: ''
    name: Zone3
    mode: lines
    fill: toself
    fillcolor: RGBA(200,120,55,0.06)
    line:
      color: RGBA(200,120,55,0.2)
      shape: line
      width: 2
    x:
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone3_x_begin"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone3_x_begin"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone3_x_end"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone3_x_end"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone3_x_begin"].state
    y:
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone3_y_begin"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone3_y_end"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone3_y_end"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone3_y_begin"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zone3_y_begin"].state
  - entity: ''
    name: ExZone
    mode: lines
    fill: toself
    fillcolor: RGBA(255,0,0,0.15)
    line:
      shape: line
      width: 1
      color: RGBA(255,0,0,0.2)
    x:
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zout1_x_begin"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zout1_x_begin"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zout1_x_end"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zout1_x_end"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zout1_x_begin"].state
    y:
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zout1_y_begin"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zout1_y_end"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zout1_y_end"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zout1_y_begin"].state
      - >-
        $ex
        hass.states[vars.number_name_prefix + "zout1_y_begin"].state
  - entity: ''
    name: Coverage
    mode: lines
    fill: tonexty
    fillcolor: rgba(168, 216, 234, 0.15)
    hoverinfo: none
    line:
      shape: line
      width: 0.7
      dash: dot
    x:
      - 0
      - $ex 7500 * Math.sin((2 * Math.PI)/360 * 60)
      - 6500
      - 5500
      - 4500
      - 4000
      - 3000
      - 2000
      - 1000
      - 0
      - -1000
      - -2000
      - -3000
      - -4000
      - -4500
      - -5500
      - -6500
      - $ex -7500 * Math.sin((2 * Math.PI)/360 * 60)
      - 0
    'y':
      - 0
      - $ex 7500 * Math.cos((2 * Math.PI)/360 * 60)
      - $ex Math.sqrt( 7500**2 - 6500**2 )
      - $ex Math.sqrt( 7500**2 - 5500**2 )
      - $ex Math.sqrt( 7500**2 - 4500**2 )
      - $ex Math.sqrt( 7500**2 - 4000**2 )
      - $ex Math.sqrt( 7500**2 - 3000**2 )
      - $ex Math.sqrt( 7500**2 - 2000**2 )
      - $ex Math.sqrt( 7500**2 - 1000**2 )
      - 7500
      - $ex Math.sqrt( 7500**2 - 1000**2 )
      - $ex Math.sqrt( 7500**2 - 2000**2 )
      - $ex Math.sqrt( 7500**2 - 3000**2 )
      - $ex Math.sqrt( 7500**2 - 4000**2 )
      - $ex Math.sqrt( 7500**2 - 4500**2 )
      - $ex Math.sqrt( 7500**2 - 5500**2 )
      - $ex Math.sqrt( 7500**2 - 6500**2 )
      - $ex 7500 * Math.cos((2 * Math.PI)/360 * 60)
      - 0
raw_plotly_config: true

title: $ex "Presence Sensor Map"
